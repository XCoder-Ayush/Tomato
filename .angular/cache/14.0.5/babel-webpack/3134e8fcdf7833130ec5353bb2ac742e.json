{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Asus/Desktop/Tomato/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../food/food.service\";\nexport class TagsService {\n  constructor(foodService) {\n    this.foodService = foodService;\n    this.foodItems = [];\n    this.tagMap = new Map();\n    this.tags = [];\n  }\n\n  ngOnInit() {\n    this.getAllTags();\n  }\n\n  getAllTags() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      // Admins will allow some mostly searched tags: eg show the mostly searched 5 tags\n      // Solely on the discretionary of the admins:\n      yield _this.foodService.getAllFoodItemsSync().then(resp => {\n        _this.foodItems = resp;\n      });\n      console.log(_this.foodItems);\n\n      for (let food of _this.foodItems) {\n        for (let tag of food.tags) {\n          // console.log(tag);\n          let val = _this.tagMap.get(tag);\n\n          if (val == undefined || val == null) val = 0;\n\n          _this.tagMap.set(tag.toLowerCase(), val + 1);\n        }\n      }\n\n      console.log(_this.tagMap);\n      return [{\n        name: 'All',\n        count: 8\n      }, {\n        name: 'NonVeg',\n        count: 2\n      }, {\n        name: 'Veg',\n        count: 2\n      }, {\n        name: 'South Indian',\n        count: 1\n      }, {\n        name: 'Birthday',\n        count: 2\n      }];\n    })();\n  }\n\n}\n\nTagsService.ɵfac = function TagsService_Factory(t) {\n  return new (t || TagsService)(i0.ɵɵinject(i1.FoodService));\n};\n\nTagsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: TagsService,\n  factory: TagsService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;AAQA,OAAM,MAAOA,WAAP,CAAkB;EAEtBC,YAAoBC,WAApB,EAA6C;IAAzB;IACpB,iBAAmB,EAAnB;IACA,cAAQ,IAAIC,GAAJ,EAAR;IACA,YAAY,EAAZ;EAHkD;;EAKlDC,QAAQ;IACN,KAAKC,UAAL;EACD;;EAEKA,UAAU;IAAA;;IAAA;MACd;MACA;MACA,MAAM,KAAI,CAACH,WAAL,CAAiBI,mBAAjB,GAAuCC,IAAvC,CAA6CC,IAAD,IAAQ;QACxD,KAAI,CAACC,SAAL,GAAeD,IAAf;MACD,CAFK,CAAN;MAIAE,OAAO,CAACC,GAAR,CAAY,KAAI,CAACF,SAAjB;;MAEA,KAAI,IAAIG,IAAR,IAAgB,KAAI,CAACH,SAArB,EAA+B;QAC7B,KAAI,IAAII,GAAR,IAAeD,IAAI,CAACE,IAApB,EAAyB;UACvB;UACA,IAAIC,GAAG,GAAE,KAAI,CAACC,MAAL,CAAYC,GAAZ,CAAgBJ,GAAhB,CAAT;;UACA,IAAGE,GAAG,IAAEG,SAAL,IAAkBH,GAAG,IAAE,IAA1B,EAA+BA,GAAG,GAAC,CAAJ;;UAC/B,KAAI,CAACC,MAAL,CAAYG,GAAZ,CAAgBN,GAAG,CAACO,WAAJ,EAAhB,EAAmCL,GAAG,GAAC,CAAvC;QACD;MACF;;MACDL,OAAO,CAACC,GAAR,CAAY,KAAI,CAACK,MAAjB;MAEA,OAAO,CACL;QAAEK,IAAI,EAAE,KAAR;QAAeC,KAAK,EAAE;MAAtB,CADK,EAEL;QAAED,IAAI,EAAE,QAAR;QAAkBC,KAAK,EAAE;MAAzB,CAFK,EAGL;QAAED,IAAI,EAAE,KAAR;QAAeC,KAAK,EAAE;MAAtB,CAHK,EAIL;QAAED,IAAI,EAAE,cAAR;QAAwBC,KAAK,EAAE;MAA/B,CAJK,EAKL;QAAED,IAAI,EAAE,UAAR;QAAoBC,KAAK,EAAE;MAA3B,CALK,CAAP;IAnBc;EA0Bf;;AArCqB;;;mBAAXtB,aAAWuB;AAAA;;;SAAXvB;EAAWwB,SAAXxB,WAAW;EAAAyB,YAFV","names":["TagsService","constructor","foodService","Map","ngOnInit","getAllTags","getAllFoodItemsSync","then","resp","foodItems","console","log","food","tag","tags","val","tagMap","get","undefined","set","toLowerCase","name","count","i0","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Asus\\Desktop\\Tomato\\src\\app\\services\\tags\\tags.service.ts"],"sourcesContent":["import { Injectable, OnInit } from '@angular/core';\nimport { Tag } from 'src/app/shared/models/Tag';\nimport { FoodService } from '../food/food.service';\nimport { Food } from 'src/app/shared/models/food';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TagsService implements OnInit{\n\n  constructor(private foodService : FoodService) { }\n  foodItems:Food[] = [];\n  tagMap =new Map<string, number>();\n  tags: Tag[]=[];\n  \n  ngOnInit(): void {\n    this.getAllTags();\n  }\n\n  async getAllTags(){\n    // Admins will allow some mostly searched tags: eg show the mostly searched 5 tags\n    // Solely on the discretionary of the admins:\n    await this.foodService.getAllFoodItemsSync().then((resp)=>{\n      this.foodItems=resp;\n    })\n\n    console.log(this.foodItems);\n    \n    for(let food of this.foodItems){\n      for(let tag of food.tags){\n        // console.log(tag);\n        let val= this.tagMap.get(tag);\n        if(val==undefined || val==null)val=0;\n        this.tagMap.set(tag.toLowerCase(), val+1);\n      }\n    }\n    console.log(this.tagMap);\n\n    return [\n      { name: 'All', count: 8 },\n      { name: 'NonVeg', count: 2 },\n      { name: 'Veg', count: 2 },\n      { name: 'South Indian', count: 1 },\n      { name: 'Birthday', count: 2 }\n    ];\n  }\n}\n"]},"metadata":{},"sourceType":"module"}