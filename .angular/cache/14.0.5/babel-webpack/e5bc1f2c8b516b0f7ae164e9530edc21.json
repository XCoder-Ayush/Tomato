{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Asus/Desktop/Tomato/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Tag } from 'src/app/shared/models/Tag';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../food/food.service\";\nexport class TagsService {\n  constructor(foodService) {\n    this.foodService = foodService;\n    this.foodItems = [];\n    this.tagMap = new Map();\n    this.tags = [];\n    this.tagNames = ['All', 'NonVeg', 'Veg', 'South Indian', 'Birthday'];\n    this.currentTag = '';\n  }\n\n  ngOnInit() {\n    // this.getAllTags();\n    this.currentTag = 'All';\n  }\n\n  getAllTags() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      // Admins will allow some mostly searched tags: eg show the mostly searched 5 tags\n      // Solely on the discretionary of the admins:\n      yield _this.foodService.getAllFoodItemsSync().then(resp => {\n        _this.foodItems = resp;\n      });\n      console.log(_this.foodItems);\n\n      for (let food of _this.foodItems) {\n        for (let tag of food.tags) {\n          let val = _this.tagMap.get(tag.toLowerCase().replace(/\\s+/g, \"\"));\n\n          if (val == undefined || val == null) val = 0;\n\n          _this.tagMap.set(tag.toLowerCase().replace(/\\s+/g, \"\"), val + 1);\n        }\n      }\n\n      console.log(_this.tagMap);\n\n      for (let tagName of _this.tagNames) {\n        let tag = new Tag();\n        tag['name'] = tagName;\n\n        let tagCount = _this.tagMap.get(tagName.toLowerCase().replace(/\\s+/g, \"\"));\n\n        if (tagCount == null || tagCount == undefined) tagCount = 0;\n        if (tagName == 'All') tagCount = _this.foodItems.length;\n        tag['count'] = tagCount;\n        if (tagCount > 0) _this.tags.push(tag);\n      }\n\n      console.log(_this.tags);\n      return _this.tags;\n    })();\n  }\n\n  getFoodByTag() {}\n\n}\n\nTagsService.ɵfac = function TagsService_Factory(t) {\n  return new (t || TagsService)(i0.ɵɵinject(i1.FoodService));\n};\n\nTagsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: TagsService,\n  factory: TagsService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AACA,SAASA,GAAT,QAAoB,2BAApB;;;AAOA,OAAM,MAAOC,WAAP,CAAkB;EAEtBC,YAAoBC,WAApB,EAA6C;IAAzB;IACpB,iBAAmB,EAAnB;IACA,cAAQ,IAAIC,GAAJ,EAAR;IACA,YAAY,EAAZ;IACA,gBAAmB,CAAC,KAAD,EAAO,QAAP,EAAgB,KAAhB,EAAsB,cAAtB,EAAqC,UAArC,CAAnB;IACA,kBAAW,EAAX;EALkD;;EAMlDC,QAAQ;IACN;IACA,KAAKC,UAAL,GAAgB,KAAhB;EACD;;EAEKC,UAAU;IAAA;;IAAA;MACd;MACA;MACA,MAAM,KAAI,CAACJ,WAAL,CAAiBK,mBAAjB,GAAuCC,IAAvC,CAA6CC,IAAD,IAAQ;QACxD,KAAI,CAACC,SAAL,GAAeD,IAAf;MACD,CAFK,CAAN;MAIAE,OAAO,CAACC,GAAR,CAAY,KAAI,CAACF,SAAjB;;MAEA,KAAI,IAAIG,IAAR,IAAgB,KAAI,CAACH,SAArB,EAA+B;QAC7B,KAAI,IAAII,GAAR,IAAeD,IAAI,CAACE,IAApB,EAAyB;UAEvB,IAAIC,GAAG,GAAE,KAAI,CAACC,MAAL,CAAYC,GAAZ,CAAgBJ,GAAG,CAACK,WAAJ,GAAkBC,OAAlB,CAA0B,MAA1B,EAAkC,EAAlC,CAAhB,CAAT;;UACA,IAAGJ,GAAG,IAAEK,SAAL,IAAkBL,GAAG,IAAE,IAA1B,EAA+BA,GAAG,GAAC,CAAJ;;UAC/B,KAAI,CAACC,MAAL,CAAYK,GAAZ,CAAgBR,GAAG,CAACK,WAAJ,GAAkBC,OAAlB,CAA0B,MAA1B,EAAkC,EAAlC,CAAhB,EAAuDJ,GAAG,GAAC,CAA3D;QAED;MACF;;MAEDL,OAAO,CAACC,GAAR,CAAY,KAAI,CAACK,MAAjB;;MAEA,KAAI,IAAIM,OAAR,IAAmB,KAAI,CAACC,QAAxB,EAAiC;QAC/B,IAAIV,GAAG,GAAC,IAAIf,GAAJ,EAAR;QACAe,GAAG,CAAC,MAAD,CAAH,GAAYS,OAAZ;;QACA,IAAIE,QAAQ,GAAC,KAAI,CAACR,MAAL,CAAYC,GAAZ,CAAgBK,OAAO,CAACJ,WAAR,GAAsBC,OAAtB,CAA8B,MAA9B,EAAsC,EAAtC,CAAhB,CAAb;;QACA,IAAGK,QAAQ,IAAE,IAAV,IAAkBA,QAAQ,IAAEJ,SAA/B,EAAyCI,QAAQ,GAAC,CAAT;QACzC,IAAGF,OAAO,IAAE,KAAZ,EAAkBE,QAAQ,GAAC,KAAI,CAACf,SAAL,CAAegB,MAAxB;QAElBZ,GAAG,CAAC,OAAD,CAAH,GAAaW,QAAb;QACA,IAAGA,QAAQ,GAAC,CAAZ,EAAc,KAAI,CAACV,IAAL,CAAUY,IAAV,CAAeb,GAAf;MACf;;MACDH,OAAO,CAACC,GAAR,CAAY,KAAI,CAACG,IAAjB;MAEA,OAAO,KAAI,CAACA,IAAZ;IAjCc;EAkCf;;EAGDa,YAAY,IAEX;;AApDqB;;;mBAAX5B,aAAW6B;AAAA;;;SAAX7B;EAAW8B,SAAX9B,WAAW;EAAA+B,YAFV","names":["Tag","TagsService","constructor","foodService","Map","ngOnInit","currentTag","getAllTags","getAllFoodItemsSync","then","resp","foodItems","console","log","food","tag","tags","val","tagMap","get","toLowerCase","replace","undefined","set","tagName","tagNames","tagCount","length","push","getFoodByTag","i0","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Asus\\Desktop\\Tomato\\src\\app\\services\\tags\\tags.service.ts"],"sourcesContent":["import { Injectable, OnInit } from '@angular/core';\nimport { Tag } from 'src/app/shared/models/Tag';\nimport { FoodService } from '../food/food.service';\nimport { Food } from 'src/app/shared/models/food';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TagsService implements OnInit{\n\n  constructor(private foodService : FoodService) { }\n  foodItems:Food[] = [];\n  tagMap =new Map<string, number>();\n  tags: Tag[]=[];\n  tagNames: string[]=['All','NonVeg','Veg','South Indian','Birthday'];\n  currentTag='';\n  ngOnInit(): void {\n    // this.getAllTags();\n    this.currentTag='All';\n  }\n\n  async getAllTags(){\n    // Admins will allow some mostly searched tags: eg show the mostly searched 5 tags\n    // Solely on the discretionary of the admins:\n    await this.foodService.getAllFoodItemsSync().then((resp)=>{\n      this.foodItems=resp;\n    })\n\n    console.log(this.foodItems);\n    \n    for(let food of this.foodItems){\n      for(let tag of food.tags){\n\n        let val= this.tagMap.get(tag.toLowerCase().replace(/\\s+/g, \"\"));\n        if(val==undefined || val==null)val=0;\n        this.tagMap.set(tag.toLowerCase().replace(/\\s+/g, \"\"), val+1);\n\n      }\n    }\n\n    console.log(this.tagMap);\n\n    for(let tagName of this.tagNames){\n      let tag=new Tag();\n      tag['name']=tagName;\n      let tagCount=this.tagMap.get(tagName.toLowerCase().replace(/\\s+/g, \"\"));\n      if(tagCount==null || tagCount==undefined)tagCount=0;\n      if(tagName=='All')tagCount=this.foodItems.length;\n\n      tag['count']=tagCount;\n      if(tagCount>0)this.tags.push(tag);\n    }\n    console.log(this.tags);\n    \n    return this.tags;\n  }\n\n\n  getFoodByTag(){\n\n  }\n}\n"]},"metadata":{},"sourceType":"module"}